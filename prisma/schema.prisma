// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  shipments Shipment[]
  orders    Order[]
  activityLogs ActivityLog[]

  @@map("users")
}

model Warehouse {
  id          String  @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  capacity    Int     // in cubic meters
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  shipments   Shipment[]

  @@map("warehouses")
}

model Vendor {
  id          String  @id @default(cuid())
  name        String
  email       String  @unique
  phone       String?
  address     String
  city        String
  state       String
  country     String
  postalCode  String
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders      Order[]

  @@map("vendors")
}

model Fare {
  id              String      @id @default(cuid())
  fromCity        String
  toCity          String
  branchDelivery  Float       // Fare for branch delivery
  codBranch       Float       // Fare for COD branch delivery
  doorDelivery    Float       // Fare for door delivery
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  orders          Order[]

  @@unique([fromCity, toCity])
  @@map("fares")
}

model Order {
  id                    String      @id @default(cuid())
  orderNumber           String      @unique
  vendorId              String
  userId                String?     // assigned user/employee
  status                OrderStatus @default(PENDING)
  deliveryCity          String
  deliveryAddress       String
  contactNumber         String
  name                  String
  alternateContactNumber String?
  amountToBeCollected   Float?      // COD amount
  deliveryType          DeliveryType
  fareId                String
  productWeight         Float       // in kg
  productType           String
  totalAmount           Float
  notes                 String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  // Relations
  vendor                Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  user                  User?       @relation(fields: [userId], references: [id])
  fare                  Fare        @relation(fields: [fareId], references: [id])
  shipments             Shipment[]

  @@map("orders")
}

model Shipment {
  id            String        @id @default(cuid())
  trackingNumber String       @unique
  orderId       String
  warehouseId   String
  userId        String?       // assigned user/employee
  status        ShipmentStatus @default(PREPARING)
  carrier       String?
  trackingUrl   String?
  estimatedDelivery DateTime?
  actualDelivery  DateTime?
  weight        Float?
  dimensions    Json?         // {length, width, height} in cm
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  warehouse     Warehouse     @relation(fields: [warehouseId], references: [id])
  user          User?         @relation(fields: [userId], references: [id])

  @@map("shipments")
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  userEmail   String?
  method      String
  path        String
  route       String?
  statusCode  Int
  durationMs  Int
  ip          String?
  userAgent   String?
  referer     String?
  query       Json?
  params      Json?
  body        Json?
  createdAt   DateTime @default(now())

  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([method, statusCode])
  @@map("activity_logs")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum DeliveryType {
  BRANCH_DELIVERY
  COD_BRANCH
  DOOR_DELIVERY
}

enum ShipmentStatus {
  PREPARING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED_DELIVERY
  RETURNED
}
